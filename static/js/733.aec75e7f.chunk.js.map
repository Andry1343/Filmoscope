{"version":3,"file":"static/js/733.aec75e7f.chunk.js","mappings":"0PAEaA,EAAOC,EAAAA,EAAAA,GAAH,0HAKJC,EAAQD,EAAAA,EAAAA,IAAH,wCAGLE,EAAOF,EAAAA,EAAAA,EAAH,6G,SCNV,SAASG,EAAT,GAAiE,IAAD,IAA5CC,MAASC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACtD,OACE,8BACGF,IACC,UAACN,EAAD,YACE,SAACE,EAAD,CAAOO,IAAK,UAPM,mCAOcH,EAAcI,IAAKH,KACnD,SAACJ,EAAD,UAAOI,KACP,UAACJ,EAAD,yBAAkBK,SAK3B,CCdM,IAAMG,EAAOV,EAAAA,EAAAA,GAAH,g2BCIJW,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeC,OAAON,IACnBO,MAAK,SAAAC,GAAO,OAAIT,EAAQS,EAAQC,KAAKX,KAAzB,IACZY,OAAM,SAAAR,GAAK,OAAIC,EAASD,EAAMS,QAAnB,GACf,GAAE,CAACX,KAGF,gCACGE,GAAS,uCACV,SAACP,EAAD,UACGG,EAAKc,KAAI,SAAAvB,GACR,OAAO,SAACD,EAAD,CAAUC,MAAOA,GAAYA,EAAMwB,GAC3C,QAIR,EAED,G,mMC3BMC,EAAU,mCACVC,EAAW,gCACXC,EAAe,qBACfC,EAAgB,eAEf,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBC,EAAAA,EAAAA,IAAA,UAClBL,GADkB,OACPC,EADO,oBACiBF,EADjB,iBACiCK,IAFnD,cACCE,EADD,yBAIEA,GAJF,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBH,EAAAA,EAAAA,IAAA,UAClBL,GADkB,OACPE,EADO,oBACkBH,EADlB,kBACmCS,IAFrD,cACCF,EADD,yBAIEA,GAJF,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BX,GAA/B,uFACkBO,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDF,EADC,oBACaC,IAF/B,cACCO,EADD,yBAIEA,GAJF,kEAOA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BQ,GAA9B,uFACkBO,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDF,EADC,4BACqBC,IAFvC,cACCO,EADD,yBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BZ,GAA/B,uFACkBO,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDF,EADC,4BACqBC,IAFvC,cACCO,EADD,yBAIEA,GAJF,kE","sources":["components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0px 10px 15px 2px rgba(0, 0, 0, 0.5);\n`;\nexport const Image = styled.img`\n  width: 100%;\n`;\nexport const Text = styled.p`\n  font-weight: 200;\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n`;\n","import { Image, Item, Text } from './CastItem.styled';\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport function CastItem({ actor: { profile_path, name, character } }) {\n  return (\n    <>\n      {profile_path && (\n        <Item>\n          <Image src={`${BASE_IMG_URL}` + profile_path} alt={name} />\n          <Text>{name}</Text>\n          <Text>Character: {character}</Text>\n        </Item>\n      )}\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 30px 0;\n  text-decoration: none;\n  display: grid;\n  grid-template-rows: auto;\n  grid-gap: 15px;\n  margin: 30px auto;\n\n  @media only screen and (min-width: 320px) {\n    /* For everything bigger than 320px */\n    grid-template-columns: repeat(1, 1fr);\n  }\n  @media only screen and (min-width: 481px) {\n    /* For everything bigger than 481px */\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media only screen and (min-width: 769px) {\n    /* For everything bigger than 769px */\n    grid-template-columns: repeat(3, 1fr);\n  }\n  @media only screen and (min-width: 1025px) {\n    /* For everything bigger than 1025px */\n    grid-template-columns: repeat(4, 1fr);\n  }\n  @media only screen and (min-width: 1201px) {\n    /* For everything bigger than 1201px */\n    grid-template-columns: repeat(5, 1fr);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { getMovieActors } from 'components/getMovies';\nimport { useParams } from 'react-router-dom';\nimport { CastItem } from 'components/CastItem/CastItem';\nimport { List } from './Cast.styled';\n\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getMovieActors(Number(movieId))\n      .then(credits => setCast(credits.data.cast))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      {error && 'Something wrong, reload the page...'}\n      <List>\n        {cast.map(actor => {\n          return <CastItem actor={actor} key={actor.id} />;\n        })}\n      </List>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'd94f1660bc08f9c6e6ef31fbeee3057f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_URL = 'trending/movie/day';\nconst BY_SEARCH_URL = 'search/movie';\n\nexport async function getTrendingMovies(page) {\n  const response = await axios.get(\n    `${BASE_URL}${TRENDING_URL}?api_key=${API_KEY}&page=${page}`\n  );\n  return response;\n}\n\nexport async function getMovieBySearch(query) {\n  const response = await axios.get(\n    `${BASE_URL}${BY_SEARCH_URL}?api_key=${API_KEY}&query=${query}`\n  );\n  return response;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport async function getMovieActors(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport async function getTrailer(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/videos?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n}\n\n\n /* export default function openTrailer(id) {\n  getTrailer(id)\n    .then(data => {\n      const key = data.results[0].key;\n\n      iframeTrailer.src = srcTrailer + key;\n     \n\n)}} */\n \n/* export default function openTrailer(id) {\n  findTrailer(id)\n    .then(data => {\n      const key = data.results[0].key;\n\n      iframeTrailer.src = srcTrailer + key;\n      modal.show();\n\n      const closeBtn = document.querySelector('.close-modal__trailer');\n      closeBtn.addEventListener('click', closeModal);\n      function closeModal(e) {\n        modal.close();\n        window.removeEventListener('keydown', closeModalHandler);\n      }\n    })\n    .catch(error => {\n      modal2.show();\n      console.log(error);\n    });\n}\n\nfunction findTrailer(idCard) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${idCard}/videos?api_key=${KEY}&language=en-US`\n  ).then(respons => respons.json());\n} */"],"names":["Item","styled","Image","Text","CastItem","actor","profile_path","name","character","src","alt","List","Cast","useState","cast","setCast","movieId","useParams","error","setError","useEffect","getMovieActors","Number","then","credits","data","catch","message","map","id","API_KEY","BASE_URL","TRENDING_URL","BY_SEARCH_URL","getTrendingMovies","page","axios","response","getMovieBySearch","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}